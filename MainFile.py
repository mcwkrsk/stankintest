# # # # # # # # # #-Z
# RELEASE 0.0.1a # #Z –æ—Ç 15.11.2024
# # # # # # # # # #-Z
import os
import sys

def install_and_import(package, import_name=None):
    if import_name is None:
        import_name = package
    try:
        return __import__(import_name)
    except ImportError:
        os.system(f"{sys.executable} -m pip install {package}")
        return __import__(import_name)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
logging = install_and_import('logging')
asyncio = install_and_import('asyncio')
aiosqlite = install_and_import('aiosqlite')
aiohttp = install_and_import('aiohttp')  # –î–æ–±–∞–≤–ª—è–µ–º aiohttp
telebot = install_and_import('pyTelegramBotAPI', 'telebot')
from telebot import types  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç types

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
import Settings # –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
import Homework # –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–æ–¥–±–æ—Ç–∞ –î–ó
import Union # –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–æ–¥–±–æ—Ç–∞ –ü—Ä–æ—Ñ—Å–æ—é–∑–∞
import Club # –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–æ–¥–±–æ—Ç–∞ –ö–ª—É–±–∞ –°—Ç–∞–Ω–∫–∏–Ω–∞
import AdvertisementFile # —Ñ–∞–π–ª —Ä–µ–∫–ª–∞–º—ã

logging.basicConfig(level=logging.INFO) # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

@Settings.bot.message_handler(commands=['start'])
async def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    _item1_ = types.KeyboardButton('–î/–ó')
    _item2_ = types.KeyboardButton('–ü—Ä–æ—Ñ–∫–æ–º')
    _item3_ = types.KeyboardButton('–ö–ª—É–±')
    _item4_ = types.KeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–µ–∫–ª–∞–º—ãüíú')  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
    _item5_ = types.KeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—éü§ì')

    markup.add(_item1_, _item2_, _item3_, _item4_, _item5_)
    await Settings.bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª –±–æ—Ç–∞!',reply_markup=markup)

@Settings.bot.message_handler(content_types=['text'])
async def bot_message(message: types.Message):
    user_id = str(message.from_user.id)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ user_id - —Å—Ç—Ä–æ–∫–∞

    if user_id not in Settings.user_states:
        Settings.user_states[user_id] = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏

    if message.text == '–î/–ó':
        await Homework._homework_(message)

    if message.text == '–ü—Ä–æ—Ñ–∫–æ–º':
        await Union._union_(message)

    if message.text == '–ö–ª—É–±':
        await Club._club_(message)

    if message.text == '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–µ–∫–ª–∞–º—ãüíú':
        await AdvertisementFile.toggle_subscription(user_id, message)  # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    if message.text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é —Ä–æ–ª—å‚úÖ':
        await check_role(message)
    if message.text == '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—éü§ì':
        await Settings.bot.reply_to(message, "–•–æ—á–µ—à—å –Ω–∞—É—á–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º-–ø–æ–º–æ—â–Ω–∏–∫–æ–º? "
                                             "–¢–æ–≥–¥–∞ –º—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é —Ä–∞—Å—Å–∫–∞–∂–µ–º –∫–∞–∫ –∏–º–µ–Ω–Ω–æ –µ–≥–æ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å\n\n")
        async with aiosqlite.connect('database/datausers.db') as db:
            async with db.execute("SELECT role FROM users WHERE id = ?", (user_id,)) as cursor:
                user_role_row = await cursor.fetchone()
                if user_role_row and user_role_row[0] is not None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                    user_role = user_role_row[0]
                    if user_role == 'elder' or user_role == 'admin':
                        await Settings.bot.reply_to(message, "–ù–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç")
                    else:
                        await Settings.bot.reply_to(message, "–ù–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç")
                else:
                    await Settings.bot.reply_to(message, "–ù–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç")  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    if message.text == '–ù–∞–∑–∞–¥':
        await start(message)

    if message.text == '–ù–û–°–û–í–ò–¶–ö–ò–ô–õ–£–ß–®–ò–ô–ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨':
        user_id = str(message.from_user.id)
        Settings.user_states[user_id] = 'waiting_for_group_for_elder'
        await Settings.bot.reply_to(message, "–ö–∞–∫–∞—è –≥—Ä—É–ø–ø–∞?")

    elif Settings.user_states.get(user_id) == 'waiting_for_group_for_elder':
        group = message.text.upper().strip()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Ä–æ–ª—å
        async with aiosqlite.connect('database/datausers.db') as db:
            async with db.execute("SELECT role FROM users WHERE id = ?", (user_id,)) as cursor:
                existing_role = await cursor.fetchone()

            if existing_role and existing_role[0] in ['admin', 'elder']:
                await Settings.bot.reply_to(message, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ —Å—Ç–∞—Ä–æ—Å—Ç—ã.")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if existing_role:
                    await db.execute("UPDATE users SET group_of = ?, role = 'elder' WHERE id = ?", (group, user_id))
                else:
                    await db.execute("INSERT INTO users (id, group_of, role) VALUES (?, ?, 'elder')", (user_id, group))

                await db.commit()
                await Settings.bot.reply_to(message, f"–¢–µ–ø–µ—Ä—å –≤—ã —Å—Ç–∞—Ä–æ—Å—Ç–∞ –≥—Ä—É–ø–ø—ã {group}!")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        Settings.user_states[user_id] = None

    if message.text.lower() == '—Ö–æ—Ö–æ–ª':
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        photo_path = 'images/pig.webp'

        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with open(photo_path, 'rb') as photo:
                await Settings.bot.send_photo(message.chat.id, photo)
        except FileNotFoundError:
            await Settings.bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        except Exception as e:
            await Settings.bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    if message.text.lower() == '–ª—É—á—à–∏–π':
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        photo_path = 'images/best.jfif'

        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with open(photo_path, 'rb') as photo:
                await Settings.bot.send_photo(message.chat.id, photo)
        except FileNotFoundError:
            await Settings.bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        except Exception as e:
            await Settings.bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")


    if message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∑':
        await Settings.bot.reply_to(message, '–î/–ó –∏–∑–º–µ–Ω–µ–Ω–æ')
        await Homework.refactor_homework(message, '–ò–∑–º–µ–Ω–∏—Ç—å –î/–ó')

    if message.text == '–ù–µ –º–µ–Ω—è—Ç—å –¥–∑':
        await Settings.bot.reply_to(message, '–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç')
        await Homework.refactor_homework(message, '–ù–µ –∏–∑–º–µ–Ω—è—Ç—å –î/–ó')
    
    if message.text == '–£–¥–∞–ª–∏—Ç—å –¥–∑':
        await Settings.bot.reply_to(message, '–î/–ó —É–¥–∞–ª–µ–Ω–æ')
        await Homework.refactor_homework(message, '–£–¥–∞–ª–∏—Ç—å –î/–ó')

    
   
    if message.text == '–í—ã–≤–µ—Å—Ç–∏ –î–óüöÄ':
        Settings.user_states[user_id] = '–ø–æ–ª—É—á–∏—Ç—å_–î/–ó_–≥—Ä—É–ø–ø–∞'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã
        await Settings.bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")


    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –¥–∑üìù':
        user_id = str(message.from_user.id)
        async with aiosqlite.connect('database/datausers.db') as db:
            async with db.execute("SELECT group_of, role FROM users WHERE id = ?", (user_id,)) as cursor:
                user_data = await cursor.fetchone()
        if user_data:
            group, role = user_data
            if role == 'elder':
                # –î–ª—è —Å—Ç–∞—Ä–æ—Å—Ç—ã —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                Settings.user_states[user_id] = '–¥–æ–±–∞–≤–∏—Ç—å_–î/–ó_–¥–∞—Ç–∞'
                Settings.user_states[f'group_{user_id}'] = group  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –±–∞–∑—ã
                await Settings.bot.reply_to(message, f"–í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {group}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")
            elif role == 'admin':
                Settings.user_states[user_id] = '–¥–æ–±–∞–≤–∏—Ç—å_–î/–ó_–≥—Ä—É–ø–ø–∞'
                await Settings.bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∑:')
            else:
                await Settings.bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –î–ó.")
        else:
            await Settings.bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –î–ó.")


    elif message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∑':
        user_id = str(message.from_user.id)
        async with aiosqlite.connect('database/datausers.db') as db:
            async with db.execute("SELECT group_of, role FROM users WHERE id = ?", (user_id,)) as cursor:
                user_data = await cursor.fetchone()
        if user_data:
            group, role = user_data
            if role == 'elder':
                # –î–ª—è —Å—Ç–∞—Ä–æ—Å—Ç—ã —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                Settings.user_states[user_id] = '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å_–î/–ó_–¥–∞—Ç–∞'
                Settings.user_states[f'group_{user_id}'] = group
                await Settings.bot.reply_to(message,
                                            f"–í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {group}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            elif role == 'admin':
                # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—É
                Settings.user_states[user_id] = '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å_–î/–ó_–≥—Ä—É–ø–ø–∞'
                await Settings.bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∑:')
            else:
                await Settings.bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –î–ó.")
        else:
            await Settings.bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –î–ó.")

    elif Settings.user_states[user_id] == '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å_–î/–ó_–≥—Ä—É–ø–ø–∞':
        # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—É
        async with aiosqlite.connect('database/datausers.db') as db:
            async with db.execute("SELECT role FROM users WHERE id = ?", (user_id,)) as cursor:
                user_role_row = await cursor.fetchone()
                user_role = user_role_row[0] if user_role_row and user_role_row[0] else "student"

                if user_role == 'admin':
                    Settings.user_states[user_id] = '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å_–î/–ó_–¥–∞—Ç–∞'
                    Settings.user_states[f'group_{user_id}'] = message.text
                    await Settings.bot.reply_to(message, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
                else:
                    await Settings.bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –î–ó –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.")

    elif Settings.user_states[user_id] == '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å_–î/–ó_–¥–∞—Ç–∞':
        Settings.user_states[user_id] = '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å_–î/–ó_–ø—Ä–µ–¥–º–µ—Ç'
        Settings.user_states[f'date_{user_id}'] = message.text
        await Settings.bot.reply_to(message, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")

    elif Settings.user_states[user_id] == '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å_–î/–ó_–ø—Ä–µ–¥–º–µ—Ç':
        Settings.user_states[user_id] = '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å_–î/–ó_–Ω–æ–≤–æ–µ_–æ–ø–∏—Å–∞–Ω–∏–µ'
        Settings.user_states[f'subject_{user_id}'] = message.text
        await Settings.bot.reply_to(message, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")

    elif Settings.user_states[user_id] == '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å_–î/–ó_–Ω–æ–≤–æ–µ_–æ–ø–∏—Å–∞–Ω–∏–µ':
        group = Settings.user_states[f'group_{user_id}']
        date = Settings.user_states[f'date_{user_id}']
        subject = Settings.user_states[f'subject_{user_id}']
        new_description = message.text

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with aiosqlite.connect('database/datahomework.db') as db:
            await db.execute(
                "UPDATE homework SET description = ? WHERE group_of = ? AND date_of = ? AND subject = ?",
                (new_description, group, date, subject)
            )
            await db.commit()

        await Settings.bot.reply_to(message, "‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        Settings.user_states[user_id] = None
        for key in ['group', 'date', 'subject']:
            Settings.user_states.pop(f'{key}_{user_id}', None)


    elif Settings.user_states[user_id] == '–ø–æ–ª—É—á–∏—Ç—å_–î/–ó_–≥—Ä—É–ø–ø–∞':
        Settings.user_states[user_id] = '–ø–æ–ª—É—á–∏—Ç—å_–î/–ó_–¥–∞—Ç–∞'  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç—Ç–∞–ø –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
        Settings.user_states[f'group_{user_id}'] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
        await Settings.bot.reply_to(message, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤–∞–º –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –¥–∑:")

    elif Settings.user_states[user_id] == '–ø–æ–ª—É—á–∏—Ç—å_–î/–ó_–¥–∞—Ç–∞':
        group = Settings.user_states[f'group_{user_id}']  # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É
        date = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é –¥–∞—Ç—É
        results = await Homework.search_in_database(group, date)
        if results:
            response = f"–°–ø–∏—Å–æ–∫ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É {date}:\n\n" + "\n".join(f"{i + 1}) {row[1]} - {row[2]}" for i, row in enumerate(results))
        else:
            response = "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        await Settings.bot.reply_to(message, response)
        Settings.user_states[user_id] = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        del Settings.user_states[f'group_{user_id}']


    elif Settings.user_states[user_id] == '–¥–æ–±–∞–≤–∏—Ç—å_–î/–ó_–≥—Ä—É–ø–ø–∞':
        async with aiosqlite.connect('database/datausers.db') as db:
            async with db.execute("SELECT role FROM users WHERE id = ?", (user_id,)) as cursor:
                user_role_row = await cursor.fetchone()
                user_role = user_role_row[0] if user_role_row and user_role_row[0] else "student"
                if user_role == 'admin':
                    Settings.user_states[user_id] = '–¥–æ–±–∞–≤–∏—Ç—å_–î/–ó_–¥–∞—Ç–∞'
                    Settings.user_states[f'group_{user_id}'] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
                    await Settings.bot.reply_to(message, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")
                else:
                    await Settings.bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –î–ó –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.")

    elif Settings.user_states[user_id] in ('–¥–æ–±–∞–≤–∏—Ç—å_–î/–ó_–¥–∞—Ç–∞'):
        Settings.user_states[user_id] = '–¥–æ–±–∞–≤–∏—Ç—å_–î/–ó_–ø—Ä–µ–¥–º–µ—Ç'  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç—Ç–∞–ø –≤–≤–æ–¥–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        Settings.user_states[f'date_{user_id}'] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é –¥–∞—Ç—É
        await Settings.bot.reply_to(message, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")


    elif Settings.user_states[user_id] == '–¥–æ–±–∞–≤–∏—Ç—å_–î/–ó_–ø—Ä–µ–¥–º–µ—Ç':
        Settings.user_states[user_id] = '–¥–æ–±–∞–≤–∏—Ç—å_–î/–ó_–æ–ø–∏—Å–∞–Ω–∏–µ'  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç—Ç–∞–ø –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
        Settings.user_states[f'subject_{user_id}'] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
        await Settings.bot.reply_to(message, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")


    elif Settings.user_states[user_id] == '–¥–æ–±–∞–≤–∏—Ç—å_–î/–ó_–æ–ø–∏—Å–∞–Ω–∏–µ':
        group = Settings.user_states[f'group_{user_id}']
        date = Settings.user_states[f'date_{user_id}']
        subject = Settings.user_states[f'subject_{user_id}']
        homework = message.text
        async with aiosqlite.connect('database/datahomework.db') as db: # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å –ø–µ—Ä–µ–¥–∞—á–µ–π message
            async with db.execute("SELECT description FROM homework WHERE group_of =  ? AND date_of = ? AND subject = ?", (group,date,subject)) as cursor:
                if await cursor.fetchone() == None:
                    await db.commit()
                    await Homework.insert_into_database(group, date, homework, subject, user_id,message)  # user_id –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
                else:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    markup.add(types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∑'), types.KeyboardButton('–ù–µ –º–µ–Ω—è—Ç—å –¥–∑'), types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –¥–∑'))
                    await Settings.bot.reply_to(message, '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–ø–∏—Å–∞–Ω–Ω–æ–µ?', reply_markup = markup)
                    Settings.user_refactor_states[message.from_user.id] = group,date,subject,homework
        Settings.user_states[user_id] = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        for key in ['group', 'date', 'subject']:
            Settings.user_states.pop(f'{key}_{user_id}', None)


async def check_role(message):
    user_id = str(message.from_user.id)
    async with aiosqlite.connect('database/datausers.db') as db:
        async with db.execute("SELECT * FROM users WHERE id = ?", (user_id,)) as cursor:
            user_data = await cursor.fetchall()

    if user_data and len(user_data) > 0:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
        user_record = user_data[0]
        group = user_record[1] if len(user_record) > 1 and user_record[1] is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        role = user_record[2] if len(user_record) > 2 and user_record[2] is not None else "student"

        if role == 'admin':
            text = f"–í–ê–®–ê –†–û–õ–¨ - –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†\n–í–ê–®–ê –ì–†–£–ü–ü–ê - {group}"
        elif role == 'elder':
            text = f"–í–ê–®–ê –†–û–õ–¨ - –°–¢–ê–†–û–°–¢–ê\n–í–ê–®–ê –ì–†–£–ü–ü–ê - {group}"
        else:
            text = '–í–´ –û–ë–´–ß–ù–´–ô –°–¢–£–î–ï–ù–¢'
    else:
        text = '–í–´ –û–ë–´–ß–ù–´–ô –°–¢–£–î–ï–ù–¢'

    await Settings.bot.reply_to(message, text)


async def resilient_polling():
    while True:
        try:
            await Settings.bot.polling(non_stop=True)
        except Exception as e:
            print(f"Polling error: {e}. Restarting in 5 seconds...")
            await asyncio.sleep(5)

async def init_database():
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists('database'):
        os.makedirs('database')

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É homework
    async with aiosqlite.connect('database/datahomework.db') as db:  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å —Ç–æ–∂–µ datahomework.db
        await db.execute('''
            CREATE TABLE IF NOT EXISTS homework (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                group_of TEXT NOT NULL,
                date_of TEXT NOT NULL,
                description TEXT NOT NULL,
                subject TEXT NOT NULL
            )
        ''')
        await db.commit()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É users
    async with aiosqlite.connect('database/datausers.db') as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id TEXT PRIMARY KEY,
                group_of TEXT,
                role TEXT
            )
        ''')
        await db.commit()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É subscriptions
    async with aiosqlite.connect('database/subscriptions.db') as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS subscriptions (
                user_id TEXT PRIMARY KEY,
                subscribed INTEGER
            )
        ''')
        await db.commit()


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await init_database()

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–ª–∞–º—ã
    ads_task = asyncio.create_task(AdvertisementFile.send_advertisements())

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling –±–æ—Ç–∞
        await resilient_polling()
    except KeyboardInterrupt:
        print("Bot stopped by user")
    finally:
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–ª–∞–º—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        ads_task.cancel()
        try:
            await ads_task
        except asyncio.CancelledError:
            print("Advertisement task cancelled")
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        await Settings.bot.close_session()


if __name__ == '__main__':
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞ asyncio
    asyncio.run(main())