import os
import sys

def install_and_import(package, import_name=None):
    if import_name is None:
        import_name = package
    try:
        return __import__(import_name)
    except ImportError:
        os.system(f"{sys.executable} -m pip install {package}")
        return __import__(import_name)

aiosqlite = install_and_import('aiosqlite')
telebot = install_and_import('pyTelegramBotAPI', 'telebot')
from telebot import types

import Settings
async def search_in_database(value_1: str, value_2: str):
    try:
        async with aiosqlite.connect('database/datahomework.db') as db:
            async with db.execute("SELECT * FROM homework WHERE group_of = ? AND date_of = ?", (value_1, value_2)) as cursor:
                rows = await cursor.fetchall()
        return rows
    except aiosqlite.OperationalError as e:
        if "no such table" in str(e):
            # –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω—É–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É
            await init_database()
            return []
        else:
            raise


async def insert_into_database(group_of: str, date_of: str, homework: str, subject: str, user_id: str,message: str):
    async with aiosqlite.connect('database/datahomework.db') as db:
        await db.execute(
            "INSERT INTO homework (group_of, date_of, description, subject) VALUES (?, ?, ?, ?)",
            (group_of, date_of, homework, subject)
        )
        await db.commit()
        await Settings.bot.reply_to(message, "ü•∞ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã! ü•∞")  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ user_id - —ç—Ç–æ id —á–∞—Ç–∞

async def delete_row_into_database(group: str, date: str, subject: str, message: types.Message):
    async with aiosqlite.connect('database/datahomework.db') as db:
        await db.execute('DELETE FROM homework WHERE group_of = ? AND subject = ? AND date_of = ?',(group, subject, date))
        await db.commit()


async def refactor_homework(message: types.Message, button_text: str):
    group = Settings.user_refactor_states[message.from_user.id][0]
    date = Settings.user_refactor_states[message.from_user.id][1]
    subject = Settings.user_refactor_states[message.from_user.id][2]
    homework = Settings.user_refactor_states[message.from_user.id][3]

    if button_text == '–ò–∑–º–µ–Ω–∏—Ç—å –î/–ó':
        await delete_row_into_database(group, subject, date)
        await insert_into_database(group, date, homework, subject, message.from_user.id, message)

    elif button_text == '–£–¥–∞–ª–∏—Ç—å –î/–ó':
        await delete_row_into_database(group, subject, date, message)

    Settings.user_refactor_states[message.from_user.id] = {}
    await _homework_(message)


async def _homework_(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    user_id = str(message.from_user.id)

    async with aiosqlite.connect('database/datausers.db') as db:
        async with db.execute("SELECT role FROM users WHERE id = ?", (user_id,)) as cursor:
            user_role_row = await cursor.fetchone()
            # –î–æ–±–∞–≤–ª–µ–Ω–∞ —è–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É
            user_role = str(user_role_row[0]) if user_role_row and user_role_row[0] is not None else "student"

            item1 = types.KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é —Ä–æ–ª—å‚úÖ')
            item2 = types.KeyboardButton('–í—ã–≤–µ—Å—Ç–∏ –î–óüöÄ')
            item3 = types.KeyboardButton('–ù–∞–∑–∞–¥')

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–ª–∏ —Å—Ç–∞—Ä–æ—Å—Ç
            if user_role in ['elder', 'admin']:  # –¢–µ–ø–µ—Ä—å user_role –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å—Ç—Ä–æ–∫–∞
                item4 = types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∑')
                item5 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –¥–∑üìù')
                markup.add(item1, item2, item4, item5, item3)
            else:
                markup.add(item1, item2, item3)

            await Settings.bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª', reply_markup=markup)